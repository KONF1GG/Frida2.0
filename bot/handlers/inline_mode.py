"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline-—Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤"""
import html
import logging
from aiogram import Router
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from bot.api.base import utils_client
from bot.utils.decorators import check_and_add_user, send_typing_action

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router = Router()

@router.message(Command("tariff"))
@check_and_add_user
@send_typing_action
async def inline_hint(message: Message):
    bot_username = (await message.bot.me()).username
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîé –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫",
                    switch_inline_query_current_chat=""
                )
            ]
        ]
    )
    await message.answer(
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –≤ —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è <code>@{bot_username} </code> –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.inline_query()
@check_and_add_user
@send_typing_action
async def inline_address_search(inline_query: InlineQuery):
    query = inline_query.query.strip()
    if not query:
        await inline_query.answer([], cache_time=1, switch_pm_text="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å", switch_pm_parameter="start")
        return

    # –ó–∞–ø—Ä–æ—Å –∫ redis_addresses
    api_response = await utils_client.get_addresses_from_redis(query)
    if not api_response.success or not api_response.data:
        await inline_query.answer(
            [],
            cache_time=1,
            switch_pm_text="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            switch_pm_parameter="notfound"
        )
        return

    addresses = api_response.data.get('addresses')
    if not isinstance(addresses, list) or not addresses:
        await inline_query.answer(
            [],
            cache_time=1,
            switch_pm_text="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            switch_pm_parameter="notfound"
        )
        return

    results = []
    for i, item in enumerate(addresses):
        terr_id = 'terId_' + item.get('territory_id')
        address = item.get("address")
        territory_name = item.get('territory_name')
        if not address:
            continue
        address = html.escape(address.replace('<>', '?'))
        results.append(
            InlineQueryResultArticle(
                id=str(item.get("id", i)),
                title=territory_name,
                description=address,
                input_message_content=InputTextMessageContent(message_text=terr_id)
            )
        )

    await inline_query.answer(results[:50], cache_time=1)


