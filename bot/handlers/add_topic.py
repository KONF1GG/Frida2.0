"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /addtopic –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–µ–º –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.
–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ—à–∞–≥–æ–≤—ã–º –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö.
"""

import logging
from typing import Union

from aiogram import Router, F, Bot
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Document,
)
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.exceptions import TelegramBadRequest

from bot.utils.decorators import check_and_add_user, send_typing_action
from bot.utils.helpers import process_document
from bot.utils.states import AddTopicForm
from bot.api.loaddata import LoadDataClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
loaddata_client = LoadDataClient()


def get_input_method_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üìù –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é", callback_data="addtopic_manual"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data="addtopic_file"
                )
            ],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="addtopic_cancel")],
        ]
    )


def get_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="addtopic_confirm"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫", callback_data="addtopic_edit_title"
                )
            ],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="addtopic_cancel")],
        ]
    )


async def safe_send_message(
    bot: Bot,
    user_id: int,
    text: str,
    reply_markup: Union[InlineKeyboardMarkup, None] = None,
    parse_mode: str = "HTML",
) -> None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await bot.send_message(
            chat_id=user_id, text=text, reply_markup=reply_markup, parse_mode=parse_mode
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def safe_edit_message(
    callback: CallbackQuery,
    text: str,
    reply_markup: Union[InlineKeyboardMarkup, None] = None,
    parse_mode: str = "HTML",
) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ"""
    try:
        if (
            callback.message
            and hasattr(callback.message, "edit_text")
            and hasattr(callback.message, "message_id")
        ):  # InaccessibleMessage –Ω–µ –∏–º–µ–µ—Ç message_id
            await callback.message.edit_text(  # type: ignore
                text=text, reply_markup=reply_markup, parse_mode=parse_mode
            )
            return True
    except TelegramBadRequest as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if callback.from_user and callback.bot:
        await safe_send_message(
            callback.bot, callback.from_user.id, text, reply_markup, parse_mode
        )

    return False


@router.message(Command("addtopic"))
@check_and_add_user
@send_typing_action
async def start_add_topic(message: Message, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Ç–µ–º—ã"""
    if not message.from_user:
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /addtopic –ø–æ–ª—É—á–µ–Ω–∞ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
        return

    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã")

    await state.set_state(AddTopicForm.waiting_for_method)

    await message.answer(
        "üìö <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:",
        reply_markup=get_input_method_keyboard(),
        parse_mode="HTML",
    )


@router.callback_query(
    F.data == "addtopic_manual", StateFilter(AddTopicForm.waiting_for_method)
)
@check_and_add_user
@send_typing_action
async def process_manual_input(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
    await callback.answer()
    await state.set_state(AddTopicForm.waiting_for_title)

    await safe_edit_message(
        callback, "üìù <b>–†—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–µ–º—ã</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –Ω–æ–≤–æ–π —Ç–µ–º—ã:"
    )

    if callback.from_user:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–µ–º—ã")


@router.callback_query(
    F.data == "addtopic_file", StateFilter(AddTopicForm.waiting_for_method)
)
@check_and_add_user
@send_typing_action
async def process_file_input(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""
    await callback.answer()
    await state.set_state(AddTopicForm.waiting_for_file)

    await safe_edit_message(
        callback,
        "üìÑ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º (.txt, .pdf, .doc, .docx).\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20 –ú–ë",
    )

    if callback.from_user:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞")


@router.message(StateFilter(AddTopicForm.waiting_for_title), F.text)
@check_and_add_user
@send_typing_action
async def process_title_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    if not message.from_user or not message.text:
        return

    user_id = message.from_user.id
    title = message.text.strip()

    if len(title) < 3:
        await message.answer(
            "‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    if len(title) > 200:
        await message.answer(
            "‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(title=title, input_method="manual")
    await state.set_state(AddTopicForm.waiting_for_content)

    await message.answer(
        f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: <b>{title}</b>\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–º—ã:",
        parse_mode="HTML",
    )

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫: {title}")


@router.message(StateFilter(AddTopicForm.waiting_for_content), F.text)
@check_and_add_user
@send_typing_action
async def process_content_input(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
    if not message.from_user or not message.text:
        return

    user_id = message.from_user.id
    content = message.text.strip()

    if len(content) < 10:
        await message.answer(
            "‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    data = await state.get_data()
    title = data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

    await state.update_data(content=content)
    await state.set_state(AddTopicForm.waiting_for_confirmation)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
    preview = content[:200] + "..." if len(content) > 200 else content

    await message.answer(
        f"üìã <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n\n"
        f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}\n"
        f"<b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b> {preview}\n\n"
        f"<b>–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:</b> {len(content)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:",
        reply_markup=get_confirmation_keyboard(),
        parse_mode="HTML",
    )

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")


@router.message(StateFilter(AddTopicForm.waiting_for_file), F.document)
@check_and_add_user
@send_typing_action
async def process_file_upload(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º process_document"""
    if not message.from_user or not message.document or not message.bot:
        return

    user_id = message.from_user.id
    document: Document = message.document

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (20 –ú–ë)
    if document.file_size and document.file_size > 20 * 1024 * 1024:
        await message.answer(
            "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."
        )
        return

    allowed_extensions = {".txt", ".pdf", ".doc", ".docx"}
    file_name = document.file_name or "unknown"
    if not any(file_name.lower().endswith(ext) for ext in allowed_extensions):
        await message.answer(
            "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞.\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .txt, .pdf, .doc, .docx\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    title = await process_document(
        bot=message.bot,
        file_id=document.file_id,
        file_name=file_name,
        user_id=user_id,
        message=message,
        state=state,
    )

    if title:
        await message.answer(
            f"üìÑ <b>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}",
            parse_mode="HTML",
            reply_markup=get_confirmation_keyboard(),
        )
        await state.update_data(title=title, input_method="file")
        await state.set_state(AddTopicForm.waiting_for_confirmation)


@router.callback_query(
    F.data == "addtopic_confirm", StateFilter(AddTopicForm.waiting_for_confirmation)
)
@check_and_add_user
@send_typing_action
async def confirm_upload(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    if not callback.from_user:
        return

    user_id = callback.from_user.id

    try:
        await callback.answer("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π...")

        data = await state.get_data()
        title = data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        input_method = data.get("input_method", "manual")

        text = data.get("content", "")
        if not text:
            await safe_edit_message(callback, "‚ùå –û—à–∏–±–∫–∞: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        result = await loaddata_client.load_text_data(title, text, user_id)

        if result:
            await safe_edit_message(
                callback,
                f"‚úÖ <b>–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {title}\n"
                f"<b>–ú–µ—Ç–æ–¥:</b> {'–†—É—á–Ω–æ–π –≤–≤–æ–¥' if input_method == 'manual' else '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞'}\n\n"
                "–¢–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.",
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª —Ç–µ–º—É: {title}")
        else:
            await safe_edit_message(
                callback,
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            )
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}"
        )
        await safe_edit_message(
            callback,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        )
    finally:
        await state.clear()


@router.callback_query(F.data == "addtopic_cancel", StateFilter("*"))
@check_and_add_user
@send_typing_action
async def cancel_add_topic(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã"""
    try:
        await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await state.clear()

        await safe_edit_message(
            callback,
            "‚ùå <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /addtopic",
        )

        if callback.from_user:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")


# –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö callback'–æ–≤
@router.callback_query(
    F.data == "addtopic_edit_title", StateFilter(AddTopicForm.waiting_for_confirmation)
)
@check_and_add_user
@send_typing_action
async def edit_title_stub(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    await callback.answer()
    data = await state.get_data()
    current_title = data.get("title", "")
    await state.set_state(AddTopicForm.waiting_for_title_edit)
    await safe_edit_message(
        callback,
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: <i>{current_title}</i>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:",
        parse_mode="HTML",
    )
    if callback.from_user:
        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"
        )


# –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
@router.message(StateFilter(AddTopicForm.waiting_for_title_edit), F.text)
@check_and_add_user
@send_typing_action
async def process_title_edit(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    if not message.from_user or not message.text:
        return

    user_id = message.from_user.id
    new_title = message.text.strip()

    if len(new_title) < 3:
        await message.answer(
            "‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    if len(new_title) > 200:
        await message.answer(
            "‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    await state.update_data(title=new_title)
    await state.set_state(AddTopicForm.waiting_for_confirmation)

    data = await state.get_data()
    content = data.get("content", "")
    preview = content[:200] + "..." if len(content) > 200 else content

    await message.answer(
        f"üìã <b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</b>\n\n"
        f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {new_title}\n"
        f"<b>–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:</b> {preview}\n\n"
        f"<b>–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:</b> {len(content)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π:",
        reply_markup=get_confirmation_keyboard(),
        parse_mode="HTML",
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞: {new_title}")
