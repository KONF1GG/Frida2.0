import logging
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command

from api.auth import get_admins
from api.loaddata import upload_wiki_data
from utils.decorators import check_and_add_user, send_typing_action


from config import loading_sticker

router = Router()

logger = logging.getLogger(__name__)

@router.message(Command("loaddata"))
@check_and_add_user
@send_typing_action
async def handle_loaddata_command(message: Message):
    loading_message = await message.answer_sticker(loading_sticker)
    
    try:
        result = await upload_wiki_data(message.from_user.id)
        
        if result["status"] == "success":
            response_text = (
                f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n"
                f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {result['data']['data']['total_records']}\n"
            )
            
            if result['data']['data'].get('duplicates_removed', 0) > 0:
                response_text += (
                    f"üßπ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {result['data']['data']['duplicates_removed']}"
                )
            
            await message.answer(response_text)
            
    except RuntimeError as e:
        error_message = str(e)
        if "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞" in error_message:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                admins = await get_admins()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                if not admins or not isinstance(admins, list):
                    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
                keyboard_buttons = []
                for admin in admins:
                    try:
                        user_id = admin.get('user_id')
                        username = admin.get('username', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
                        if user_id:
                            keyboard_buttons.append(
                                [InlineKeyboardButton(
                                    text=username,
                                    url=f'tg://user?id={user_id}'
                                )]
                            )
                    except Exception as admin_error:
                        logger.error(f"Error processing admin data: {admin_error}")

                if not keyboard_buttons:
                    await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Å–≤—è–∑–∏")
                    return
                
                keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
                
                await message.answer(
                    '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.\n'
                    '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:',
                    reply_markup=keyboard
                )
                
            except Exception as admin_error:
                logger.error(f"Error getting admins list: {admin_error}")
                await message.answer(
                    '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.\n'
                    '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.'
                )
                
        else:
            await message.answer(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {error_message}')
            
    except ValueError as e:
        await message.answer(f'‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}')
        
    except Exception as e:
        await message.answer('üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö')
        logger.error(f"Unexpected error in handle_loaddata_command: {str(e)}", exc_info=True)
        
    finally:
        await loading_message.delete()