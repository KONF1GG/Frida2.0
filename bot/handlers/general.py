"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ AI API.
"""

import logging
from aiogram import Router
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext

from bot.utils.decorators import check_and_add_user, send_typing_action
from bot.config import bot_config
from bot.api.milvus import search_milvus
from bot.api.ai import call_ai
from bot.api.log import log
from bot.handlers.models import user_model
from bot.handlers.tariff_handler import TariffQuestionForm
from aiogram import F

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router = Router()


@router.message(F.text.startswith("@"))
@check_and_add_user
@send_typing_action
async def handle_at_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å @"""
    if not message.text or not message.from_user:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    try:
        bot_info = await message.bot.me()  # type: ignore
        bot_username = bot_info.username if bot_info and bot_info.username else "bot"
    except Exception:
        bot_username = "bot"

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîé –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ç–∞—Ä–∏—Ñ–æ–≤", switch_inline_query_current_chat=""
                )
            ]
        ]
    )

    await message.answer(
        "ü§î <b>–ü–æ—Ö–æ–∂–µ, –≤—ã –ø—ã—Ç–∞–ª–∏—Å—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–æ–º –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤!</b>\n\n"
        "üìã <i>–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:</i>\n"
        "1Ô∏è‚É£ –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º\n"
        "2Ô∏è‚É£ –í—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –∞–¥—Ä–µ—Å –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞\n"
        "3Ô∏è‚É£ –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –≤ —Å—Ç—Ä–æ–∫–µ –≤–≤–æ–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è <code>@{bot_username} </code> –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –≤–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º.",
        reply_markup=keyboard,
        parse_mode="HTML",
    )


@router.message()
@check_and_add_user
@send_typing_action
async def message_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –º–æ–¥–µ–ª–∏."""
    if not message.text or not message.from_user:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞—Ä–∏—Ñ–Ω–æ–º —Ä–µ–∂–∏–º–µ
    current_state = await state.get_state()
    if current_state in [
        TariffQuestionForm.waiting_for_question,
        TariffQuestionForm.in_tariff_mode,
    ]:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞—Ä–∏—Ñ–Ω–æ–º —Ä–µ–∂–∏–º–µ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å
        return

    user_id = message.from_user.id

    try:
        loading_message = await message.answer_sticker(bot_config.loading_sticker)

        # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        search_result = await search_milvus(user_id, message)

        if not search_result:
            logger.error(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            )
            await message.answer(
                "‚ö†Ô∏è –ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ..."
            )
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ AI API
        ai_response = await call_ai(
            text=message.text,
            combined_context=search_result.get("combined_context", ""),
            chat_history=search_result.get("chat_history", ""),
            model=user_model.get(user_id, "mistral-large-latest"),
        )

        if ai_response:
            await message.answer(ai_response, parse_mode=ParseMode.HTML)
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            await log(
                user_id=user_id,
                query=message.text,
                ai_response=ai_response,
                status=1,
                hashes=search_result.get("hashs", []),
            )
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            error_message = "‚ö†Ô∏è –ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, —è –Ω–µ —Å–º–æ–≥–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –í–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ..."
            await message.answer(error_message, parse_mode=ParseMode.HTML)
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            await log(
                user_id=user_id,
                query=message.text,
                ai_response=error_message,
                status=0,
                hashes=search_result.get("hashs", []),
            )
            logger.warning(f"AI –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        error_message = (
            "‚ö†Ô∏è –ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ..."
        )
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        try:
            await message.answer(error_message, parse_mode=ParseMode.HTML)
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            await log(
                user_id=user_id,
                query=message.text,
                ai_response=str(e),
                status=0,
                hashes=[],
            )
        except Exception as log_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {log_error}")

    finally:
        try:
            await loading_message.delete()
        except Exception as delete_error:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å loading message: {delete_error}")
