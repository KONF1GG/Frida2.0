"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π territoryId"""

import logging
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.api.base import core_client
from bot.config import bot_config

from bot.api.ai import call_ai
from bot.api.log import log
from bot.utils.decorators import check_and_add_user, send_typing_action
from bot.utils.user_settings import user_model

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

router = Router()


class TariffQuestionForm(StatesGroup):
    waiting_for_question = State()
    in_tariff_mode = State()


@router.message(F.text.startswith("terId"))
@check_and_add_user
@send_typing_action
async def handle_tariff_message(message: Message, state: FSMContext):
    try:
        await message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    tariff_code = message.text
    if tariff_code is None:
        await message.answer("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        return

    terr_id = tariff_code.split("_")[1]
    api_response = await core_client.get_tariffs_from_redis(terr_id)

    if not api_response.success or not api_response.data:
        await message.answer("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        return

    tariff_info = api_response.data

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîé –ü–æ–∏—Å–∫ —Ç–∞—Ä–∏—Ñ–æ–≤", switch_inline_query_current_chat=""
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_tariff_question"
                ),
            ]
        ]
    )

    sent_message = await message.answer(
        f"‚úÖ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –Ω–∞–π–¥–µ–Ω–∞!</b>\n\n"
        f"–ö–æ–¥ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏: <code>{terr_id}</code>\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –¥–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É. "
        f'–ù–∞–ø—Ä–∏–º–µ—Ä: <i>"–ö–∞–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è?"</i> –∏–ª–∏ <i>"–ö–∞–∫–∏–µ —Ç–∞—Ä–∏—Ñ—ã –¥–æ—Å—Ç—É–ø–Ω—ã?"</i>\n\n'
        f"üí¨ <b>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:</b>",
        reply_markup=keyboard,
        parse_mode="HTML",
    )

    await state.update_data(
        tariff_info=tariff_info,
        territory_id=terr_id,
        chat_history="",
        initial_message_id=sent_message.message_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    )
    await state.set_state(TariffQuestionForm.waiting_for_question)


@router.callback_query(F.data == "cancel_tariff_question")
@check_and_add_user
@send_typing_action
async def cancel_tariff_question(callback, state: FSMContext):
    await state.clear()
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.edit_text("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")


@router.message(TariffQuestionForm.waiting_for_question)
async def process_tariff_question(message: Message, state: FSMContext):
    if message.text is None or not message.text.strip():
        await message.answer("‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.")
        return

    data = await state.get_data()
    tariff_info = data.get("tariff_info", "")
    territory_id = data.get("territory_id", "")
    chat_history = data.get("chat_history", "")
    initial_message_id = data.get("initial_message_id")  # ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "‚ùå –û—Ç–º–µ–Ω–∞" –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if initial_message_id and message.bot:
        try:
            await message.bot.edit_message_text(  # type: ignore
                chat_id=message.chat.id,
                message_id=initial_message_id,
                text=f"‚úÖ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –Ω–∞–π–¥–µ–Ω–∞!</b>\n\n"
                f"–ö–æ–¥ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏: <code>{territory_id}</code>\n\n"
                f"üí¨ <b>–í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ...</b>",
                parse_mode="HTML",
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    await state.set_state(TariffQuestionForm.in_tariff_mode)

    try:
        loading_message = await message.answer_sticker(bot_config.loading_sticker)

        if message.from_user is None:
            await message.answer("‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        selected_model = user_model.get(message.from_user.id, "mistral-large-latest")

        tariff_context = (
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –¥–ª—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ {territory_id}:\n{str(tariff_info)}"
        )

        ai_response = await call_ai(
            text=message.text,
            combined_context=tariff_context,
            chat_history=chat_history,
            model=selected_model,
        )

        if ai_response:
            new_history = f"{chat_history}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.text}\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ai_response}"
            await state.update_data(chat_history=new_history)

            status_bar = f"üìç –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è: {territory_id}\n\n"

            await message.answer(status_bar + ai_response, parse_mode="HTML")

            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            await log(
                user_id=message.from_user.id,
                query=message.text,
                ai_response=ai_response,
                status=1,
                hashes=[],
                category="–¢–∞—Ä–∏—Ñ—ã",
            )

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üè† –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º",
                            callback_data="continue_tariff",
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üí¨ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º", callback_data="switch_to_general"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end_conversation"
                        )
                    ],
                ]
            )

            await message.answer(
                "<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:</i>",
                reply_markup=keyboard,
                parse_mode="HTML",
            )

            logger.info(
                f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–∞—Ä–∏—Ñ–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}"
            )
        else:
            error_msg = (
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            await message.answer(error_msg)

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            await log(
                user_id=message.from_user.id,
                query=message.text,
                ai_response=error_msg,
                status=0,
                hashes=[],
                category="–¢–∞—Ä–∏—Ñ—ã",
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

    finally:
        try:
            await loading_message.delete()
        except Exception as delete_error:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å loading message: {delete_error}")


@router.callback_query(F.data == "continue_tariff")
@check_and_add_user
@send_typing_action
async def continue_tariff_mode(callback, state: FSMContext):
    await callback.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ç–∞—Ä–∏—Ñ–Ω–æ–º —Ä–µ–∂–∏–º–µ")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_mode_selection"
                )
            ]
        ]
    )

    await callback.message.edit_text(
        "üí¨ <b>–ó–∞–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º:</b>",
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await state.set_state(TariffQuestionForm.waiting_for_question)


@router.callback_query(F.data == "back_to_mode_selection")
@check_and_add_user
@send_typing_action
async def back_to_mode_selection(callback, state: FSMContext):
    await callback.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞")

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üè† –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º",
                    callback_data="continue_tariff",
                )
            ],
            [
                InlineKeyboardButton(
                    text="üí¨ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º", callback_data="switch_to_general"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="end_conversation"
                )
            ],
        ]
    )

    await callback.message.edit_text(
        "<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:</i>",
        reply_markup=keyboard,
        parse_mode="HTML",
    )


@router.callback_query(F.data == "switch_to_general")
@check_and_add_user
@send_typing_action
async def switch_to_general_mode(callback, state: FSMContext):
    await state.clear()
    await callback.answer("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º")
    await callback.message.edit_text(
        "üí¨ <b>–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π. "
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.",
        parse_mode="HTML",
    )


@router.callback_query(F.data == "end_conversation")
@check_and_add_user
@send_typing_action
async def end_conversation(callback, state: FSMContext):
    await state.clear()
    await callback.answer("–†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")
    await callback.message.edit_text("‚úÖ –†–∞–∑–≥–æ–≤–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!")
